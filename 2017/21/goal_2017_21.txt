part a

you're going to help an image generation program
you always start with

.#.
..#
###

(secretly a glider gun???)

if the size of the grid is even x even, break up the grid into 2x2 squares and apply rules
otherwise it's guaranteed to be threeven x threeven, break up into 3x3 and apply rules

the rules are patterns of 2x2 or 3x3 squares which map to 3x3 or 4x4 squares
to match a pattern you can rotate/flip; but always use the given non-changed output pattern


how many pixels are on after 5 iterations?



this requires some planning
- how to accomplish matching
- how to accomplish takedown and rebuilding of grid
- numpy is the solution to easy rotations and flips
- numpy arrays are not hashable, but strings are
- so write methods to convert arrays to strings or vice versa
- numpy has splitting methods!
- numpy has concatenation methods!
- just everything you need


part b 

how many pixels are on after 18 iterations?


this worked fine but was slow; likely because of all the time converting happening
let's commit this one and then try for a faster, less type conversion necessary one


did a bit of preproccesing on the rules, got maybe a ~5x speedup out of that
someone on reddit makes the good point that after 3 iterations a 3x3 becomes a 9x9
and those 3x3 become independent
so you can save on a lot of computation by keeping counts of how many 3x3 you have at each step and evolving them independently
yooooo let's go that did the trick
now instantaneous