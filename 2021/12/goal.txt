part a

given a cave system as graph
some of the caves are BIG and some are small
find all the paths from start to end which visit small caves at most once

ideas:
- notice that BIG caves are connected only to small caves
- since every edge connects to a small cave, you want paths start-end which use each edge at most once
- recursive? # of paths start->end = sum over edges start->x of # of paths x->end in G/(x)
- what is the data structure? just use a library! better to learn libraries than reinvent the wheel

part b

you actually have time to visit a single small cave twice
start and end can only be visited once
this should be straightforward to modify part a: add an attribute to the vertices

the solution was much slower than I expected!
the recursion must be trying a whole bunch of dud pathways



post mortem
- you shouldn't be afraid to use python's builtin dicts and sets
- saw a very nice simple recursive soln which passes through more args
- my soln is very mathy in that it literally does graph things that were intuitive to me (i.e. remove from graph if its been visited) but it seems like having to copy around the whole graph is way more inefficient compared to just keeping track of what's been seen so far
- there's a good lesson here that you don't want to reinvent the wheel, but that's in tension with not wanting to get rids of weeds with a nuke (what's the common metaphor for that? using a tool that is overly powerful for a simple job)