part a

you land on Triton and find a maze
the tunnels have doors (A) and keys (a)
the goal is to obtain all the keys

what is the shortest number of steps necessary to obtain all the keys?

strategy
    at least one strat is to do an A* search, but that is complicated by the fact that the paths change as you get more keys
    rather than thinking about traversing the whole maze, let's cut out some of the cruft
    at any given time there's the shortest paths between each pair of keys
    you want to pick the sequence of keys to go for which minimizes that
    problem: there's 26! == very big many possible orders to try for the keys
    maybe that's not so bad, i.e. not all are available, some are obviously better
    the actual optimal is very different from the no doors optimal


maybe something like this
    find all the currently open keys (i.e can get to without going over locked door or other key)
    add to heap, sorted by distance
    keep heap popping until you get all 26


let's use a reader monad to save passing around the same maze all over the place
or maybe it needs to be state? if we're updating key distances based on doors or something
???
well you started doing this and then the simple task of extracting a char stumped you
in general today's data structure choices ended up being bad and hacky
not what you want to strive for

this is mega mega slow, even on the test input which has some 8 fold symmetry
(but its fine on all the other ones?)

still not clear how to do this without things going out of control
    one option: cache current keys, position; but even without positions that 2^26 = 67 million key subsets
        with positions is not actually much worse, just * 26
        this feels like a good strategy
        give this a try
    another option: assume that the optimal solution will use only shortest paths between consecutive keys
    and then you can kind of brute force a graph search on 26 vertices?
    how to convert to a graph problem
        build up a graph with for each pair of vertices: the optimal distance + the keys blocking it off?
        this makes some assumptions about the optimal solution always being per edge optimal


fuck this the cache strat also is just bad on the 8-fold test also
fuck this all you've made 3 working solutions and each just fails out on test 4 :(:(:(
eventually got the bfs with pruning working


part b

there's 4 bots instead of 1
same deal but now they move independently



really slap-dashing my way through this but that's because I'm super fed up
yeah got it done but not happy about it
lots of hacks to make it work